///头文件
#include<stdio.h>
#define maxEdges 900
#define maxVertices 30
#define maxWeight 32767
#define impossibleValue '#'
#define impossibleWeight -1
typedef char Type;
typedef int Weight;
typedef struct {
	int numVertices, numEdges;
	Type VerticesList[maxVertices];
	Weight Edge[maxVertices][maxVertices];
}MGraph;
///应用程序
#include"MGraph.h"
int getVertices(MGraph& G, Type x) {
	for (int i = 0; i < G.numVertices; i++)
		if (G.VerticesList[i] == x)
			return i;
}
int firstNeighbor(MGraph &G,int v) {
	if (v!= -1)
		for (int j = 0; j < G.numVertices; j++)
			if (G.Edge[v][j] > 0 && G.Edge[v][j] < maxWeight)return j;
	return -1;
}
int nextNeighbor(MGraph& G, int v, int w) {
	if (v != -1 && w != -1)
		for (int j = w + 1; j < G.numVertices; j++)
			if (G.Edge[v][j]>0 && G.Edge[v][j] < maxWeight) return j;
	return -1;
}
int numberOfVertices(MGraph& G) {
	return G.numVertices;

}int numberOfWeight(MGraph& G) {
	return G.numEdges;

}
Type getValue(MGraph& G, int v) {
	if (v != -1) return G.VerticesList[v];
	else return impossibleValue;

}
Weight getWeight(MGraph& G, int v, int w) {
	if (v != -1 && w != -1) return G.Edge[v][w];
	else return impossibleWeight;
}
                                                                                                                                                        
