#include<iostream>
#include<iomanip>
using namespace std;
#define STACK_INIT_SIZE 100
#define STACKINCREMENT 10
typedef char lElemType;
typedef struct BiTNode {
	lElemType data;
	struct BiTNode* lchild, * rchild;
}BiTNode, * BiTree;
typedef BiTree SElemType;
typedef struct {
	SElemType* base;
	SElemType* top;
	int stacksize;
}SqStack;
int  InitStack(SqStack& S)//建立一个栈
{
	S.base = (SElemType*)malloc(STACK_INIT_SIZE * sizeof(SElemType));
	if (!(S.base)) exit(-1);
	S.top = S.base;
	S.stacksize = STACK_INIT_SIZE;
	return 0;
}
int Push(SqStack& S, SElemType e)//将元素e插入栈中
{
	if (S.top - S.base >= S.stacksize)
	{
		if (!(S.base = (SElemType*)realloc(S.base, (STACK_INIT_SIZE + STACKINCREMENT) * sizeof(SElemType))))
			exit(-1);
		S.top = S.base + STACKINCREMENT;
		S.stacksize += STACKINCREMENT;
	}
	*S.top++ = e;
	return 0;
}
int Pop(SqStack& S, SElemType& e)//出栈，将栈顶元素赋值给e返回
{
	if (S.base == S.top)
		return false;
	e = *--S.top;
	return 0;
}
int StackEmpty(SqStack& S)//判定栈是否为空
{
	if (S.base == S.top)
	{
		return true;
	}
	else
		return false;
}
int GetTop(SqStack S, BiTree& e)//取栈顶元素赋值给e
{
	if (S.top == S.base) return false;
	e = *(S.top - 1);
	return 0;
}
void CreateBiTree(BiTree& T)//先序建立一棵二叉树
{
	lElemType ch;
	cin >> ch;
	if (ch == '*') T = NULL;
	else {
		if (!(T = (BiTNode*)malloc(sizeof(BiTNode))))
			exit(-1);
		T->data = ch;
		CreateBiTree(T->lchild);
		CreateBiTree(T->rchild);

	}
}
int PreOrderTraverse1(BiTree T)//先序递归遍历
{
	if (T) {
		cout << T->data;
		PreOrderTraverse1(T->lchild);
		PreOrderTraverse1(T->rchild);
		return 0;
	}
	else
		return false;
}
int InOrderTraverse1(BiTree T)//中序递归遍历
{
	if (T) {
		InOrderTraverse1(T->lchild);
		cout << T->data;
		InOrderTraverse1(T->rchild);
		return true;
	}
	else
		return false;
}
int PostOrderTraverse1(BiTree T)//后续递归遍历
{
	if (T) {
		PostOrderTraverse1(T->lchild);
		PostOrderTraverse1(T->rchild);
		cout << T->data;
		return true;
	}
	else
		return false;
}
int PreOrderTraverse2(BiTree T)//前序非递归遍历第一种方法
{
	SqStack S;
	InitStack(S);
	BiTree p = T;
	while (p || !StackEmpty(S))
	{
		if (p) {
			Push(S, p);
			cout << T->data;
			p = p->lchild;
		}
		else
		{
			Pop(S, p);
			p = p->rchild;
		}
	}
	cout << endl;
	return 0;
}
int PreOrderTraverse3(BiTree T)//前序遍历得第二种方法
{
	SqStack S;
	InitStack(S);
	BiTree p = T;
	Push(S, p);
	while (!StackEmpty(S))
	{
		while (GetTop(S, p) && p)
		{
			cout << p->data;
			Push(S, p->lchild);
		}
		Pop(S, p);
		if (!StackEmpty(S))
		{
			Pop(S, p);
			Push(S, p->rchild);
		}
	}
	return 0;
}
int PostOrderTraverse2(BiTree T)
{
	SqStack  S;
	InitStack(S);
	BiTree p = T, cur = NULL;
	Push(S, p);
	while (!StackEmpty(S))
	{
		GetTop(S, p);
		if ((p->lchild == NULL && p->rchild == NULL) || (cur == p->lchild || cur == p->rchild))
		{
			cout << p->data;
			Pop(S, p);
			cur = p;
		}
		else {
			if (p->rchild != NULL)
				Push(S, p->rchild);
			if (p->lchild != NULL)
				Push(S, p->lchild);
		}
	}
	return 0;
}
int InOrederTraverse2(BiTree T)//中序非递归遍历
{
	SqStack S;
	InitStack(S);
	BiTree p = T;
	while (p || !StackEmpty(S))
	{
		if (p) {
			Push(S, p);
			p = p->lchild;
		}
		else
		{
			Pop(S, p);
			cout << p->data;
			p = p->rchild;
		}
	}
	cout << endl;
	return 0;
}

int main()
{
	BiTree T;
	CreateBiTree(T);
	cout << "先序递归遍历:";
	PreOrderTraverse1(T);
	cout << "\n中序递归遍历:";
	InOrderTraverse1(T);
	cout << "\n后序递归遍历:";
	PostOrderTraverse1(T);
	cout << endl;
	cout << "先序非递归遍历:";
	PreOrderTraverse1(T);
	cout << "\n中序非递归遍历:";
	InOrederTraverse2(T);
	cout << "\n后续非递归遍历:";
	PostOrderTraverse2(T);
	system("pause");
	return 0;
}
