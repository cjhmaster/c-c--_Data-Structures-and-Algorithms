///图的头文件
#include<stdio.h>
#include<stdlib.h>
#define maxVertices 30
#define maxEdges 450
typedef char Type;
typedef int Weight;
#define impossibleValue '#'
#define impossibleWeight -1
typedef struct Enode {
	int dest;
	Weight cost;
	struct Enode* link;
}EdgeNode;
typedef struct Vnode {
	Type data;
	struct Enode* adj;
}VertexNode;
typedef struct {
	VertexNode VerticesList[maxVertices];
	int numVertices, numEdges;
}ALGraph;
///图的程序文件
#include"ALGraph.h"
int i;
int getVertexpos(ALGraph& G, Type v) {
	for (i = 0; i < G.numVertices && G.VerticesList[i].data != v; i++)
		if (i < G.numVertices) return i;
		else return -1;
}
int numberOfVertices(ALGraph& G) {
	return G.numVertices;
}
int numberOfEdges(ALGraph& G) {
	return G.numEdges;
}
int firstNeighbor(ALGraph& G, int v) {
	if (v != -1) {
		EdgeNode* p = G.VerticesList[i].adj;
		if (p != NULL)return p->dest;
	}
	return -1;
}
int nextNighbor(ALGraph& G, int v, int w) {
	if (v != -1) {
		Enode* p = G.VerticesList[v].adj;
		while (p != NULL && p->dest != w)p = p->link;
		if (p != NULL && p->link != NULL)return p->link->dest;
	}
	return -1;
}
Type getValue(ALGraph& G, int v) {
	if (v != -1)return G.VerticesList[v].data;
	else return impossibleValue;
}
Weight getWeight(ALGraph &G, int v, int w){
	EdgeNode* p = G.VerticesList[v].adj;
	while (p != NULL && p->dest != w) p = p->link;
	if (p != NULL)return p->cost;
	else return impossibleWeight;

}
void creaatALGraph(ALGraph& G, Type v[], int n, Type ed[][2], Weight c[], int e, int d) {
	int i, j, k; Type e1, e2; EdgeNode* q, * p;
	G.numVertices = n; G.numEdges = e;
	for (i = 0; i < G.numVertices; i++) {
		G.VerticesList[i].data = v[i]; G.VerticesList[i].adj = NULL;//输入一个三元组创建的构造
	}
	for (i = 0; i < G.numEdges; i++) {
		e1 = ed[i][0]; e2 = ed[i][1];
		j = getVertexpos(G, e1); k = getVertexpos(G, e2);
		p = G.VerticesList[i].adj;
		while (p != NULL && p->dest != k) p = p->link;
		if (p == NULL) {
			q = (EdgeNode*)malloc(sizeof(EdgeNode));
			q->dest = k;
			q->cost = c[i];
			q->link = G.VerticesList[i].adj;
			G.VerticesList[j].adj = q;
			if (d == 0) {
				q = (EdgeNode*)malloc(sizeof(EdgeNode));
				q->dest = j;
				q->cost = c[i];
				q->link = G.VerticesList[k].adj;
				G.VerticesList[k].adj = q;
			}
		}
		else p->cost = c[i];
	}
}
void printALGraph(ALGraph& G, int d) {
	int i; EdgeNode* p;
	printf("图G的顶点数是%d\n", G.numVertices);
	printf("顶点向量的值是：");
	for (i = 0; i < G.numVertices; i++) {
		printf("%c", G.numVertices);
	}
	printf("\n图G的边数是%d\n", G.numEdges);
	for (i = 0; i < G.numVertices; i++) {
		for (p = G.VerticesList[i].adj; p != NULL; p = p->link) {
			if (d == 0 && p->dest < i) continue;
			printf("（%d，%d)", i, p->dest);
			printf("%d", p->cost);
			printf(" ");
		}
		printf("\n");
	}
}
